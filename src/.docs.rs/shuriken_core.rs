/* automatically generated by rust-bindgen 0.71.1 */

pub const _GLIBCXX_CSTDDEF: u32 = 1;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 13;
pub const __GLIBCXX__: u32 = 20240904;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED: u32 = 1;
pub const _GLIBCXX_VERBOSE_ASSERT: u32 = 1;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 1;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _GLIBCXX_HAVE_FLOAT128_MATH: u32 = 1;
pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_SAME: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const _PSTL_VERSION: u32 = 12000;
pub const _PSTL_VERSION_MAJOR: u32 = 12;
pub const _PSTL_VERSION_MINOR: u32 = 0;
pub const _PSTL_VERSION_PATCH: u32 = 0;
pub const _PSTL_USAGE_WARNINGS: u32 = 0;
pub const _PSTL_UDR_PRESENT: u32 = 0;
pub const _PSTL_PRAGMA_LOCATION: &[u8; 26] = b" [Parallel STL message]: \0";
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ARC4RANDOM: u32 = 1;
pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DECL_STRNLEN: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DIRFD: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FDOPENDIR: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETENTROPY: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINK: u32 = 1;
pub const _GLIBCXX_HAVE_LINK_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
pub const _GLIBCXX_HAVE_OPENAT: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STACKTRACE: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_MMAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNLINKAT: u32 = 1;
pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_CAN_ALIGNAS_DESTRUCTIVE_SIZE: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STATIC_TZDATA: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CHDIR: u32 = 1;
pub const _GLIBCXX_USE_CHMOD: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_FSEEKO_FTELLO: u32 = 1;
pub const _GLIBCXX_USE_GETCWD: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INIT_PRIORITY_ATTRIBUTE: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_LSTAT: u32 = 1;
pub const _GLIBCXX_USE_MKDIR: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20: u32 = 1;
pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T: u32 = 1;
pub const _GLIBCXX_USE_UTIME: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GLIBCXX_X86_RDSEED: u32 = 1;
pub const _GLIBCXX_ZONEINFO_DIR: &[u8; 20] = b"/usr/share/zoneinfo\0";
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const __cpp_lib_byte: u32 = 201603;
pub const _GLIBCXX_CSTDINT: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const _GLIBCXX_CSTDLIB: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
pub type std_byte = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___byte_operand {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_bool__close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_bool__close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_char_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_char_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_signed_char_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_signed_char_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_char16_t_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_char16_t_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_char32_t_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_char32_t_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_short_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_short_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_int_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_int_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_long_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_long_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_long_long_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_long_long_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
pub type std___byte_op_t = std___byte_operand;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
unsafe extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
unsafe extern "C" {
    pub fn strtof32(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32;
}
unsafe extern "C" {
    pub fn strtof64(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64;
}
unsafe extern "C" {
    pub fn strtof32x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32x;
}
unsafe extern "C" {
    pub fn strtof64x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64x;
}
unsafe extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_strtol"]
    pub fn strtol1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_strtoul"]
    pub fn strtoul1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_strtoll"]
    pub fn strtoq1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_strtoull"]
    pub fn strtouq1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strfromd(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfromf(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfroml(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: u128,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfromf32(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfromf64(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfromf32x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32x,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfromf64x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64x,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
unsafe extern "C" {
    pub fn strtol_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_strtol_l"]
    pub fn strtol_l1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_strtoul_l"]
    pub fn strtoul_l1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_strtoll_l"]
    pub fn strtoll_l1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_strtoull_l"]
    pub fn strtoull_l1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtod_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtold_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> u128;
}
unsafe extern "C" {
    pub fn strtof32_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32;
}
unsafe extern "C" {
    pub fn strtof64_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64;
}
unsafe extern "C" {
    pub fn strtof32x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32x;
}
unsafe extern "C" {
    pub fn strtof64x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64x;
}
unsafe extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::fds_bits"][::std::mem::offset_of!(fd_set, fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
unsafe extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
unsafe extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::std::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"][::std::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"][::std::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"][::std::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"][::std::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"]
        [::std::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"]
        [::std::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"]
        [::std::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"]
        [::std::mem::offset_of!(random_data, end_ptr) - 40usize];
};
unsafe extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn drand48() -> f64;
}
unsafe extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
unsafe extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::std::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"][::std::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"][::std::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"]
        [::std::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"][::std::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__init"]
        [::std::mem::offset_of!(drand48_data, __init) - 14usize];
    ["Offset of field: drand48_data::__a"][::std::mem::offset_of!(drand48_data, __a) - 16usize];
};
unsafe extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn arc4random() -> __uint32_t;
}
unsafe extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __size: usize);
}
unsafe extern "C" {
    pub fn arc4random_uniform(__upper_bound: __uint32_t) -> __uint32_t;
}
unsafe extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkstemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkostemp(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkostemp64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkostemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkostemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn canonicalize_file_name(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
unsafe extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_d_fn_t,
        __arg: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
unsafe extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
unsafe extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u32, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ptsname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
#[doc = " @brief opaque pointers user will use for calling the different methods"]
pub type hDexContext = *mut ::std::os::raw::c_void;
pub type hApkContext = *mut ::std::os::raw::c_void;
pub const boolean_e_FALSE: boolean_e = 0;
pub const boolean_e_TRUE: boolean_e = 1;
pub type boolean_e = ::std::os::raw::c_uint;
pub const htype_e_FUNDAMENTAL: htype_e = 0;
#[doc = "! fundamental type (int, float...)"]
pub const htype_e_CLASS: htype_e = 1;
#[doc = "! user defined class"]
pub const htype_e_ARRAY: htype_e = 2;
#[doc = "! an array type"]
pub const htype_e_UNKNOWN: htype_e = 3;
#[doc = " @brief DexTypes of the DVM we have by default fundamental,\n classes and array DexTypes"]
pub type htype_e = ::std::os::raw::c_uint;
pub const hfundamental_e_BOOLEAN: hfundamental_e = 0;
pub const hfundamental_e_BYTE: hfundamental_e = 1;
pub const hfundamental_e_CHAR: hfundamental_e = 2;
pub const hfundamental_e_DOUBLE: hfundamental_e = 3;
pub const hfundamental_e_FLOAT: hfundamental_e = 4;
pub const hfundamental_e_INT: hfundamental_e = 5;
pub const hfundamental_e_LONG: hfundamental_e = 6;
pub const hfundamental_e_SHORT: hfundamental_e = 7;
pub const hfundamental_e_VOID: hfundamental_e = 8;
pub const hfundamental_e_FUNDAMENTAL_NONE: hfundamental_e = 99;
#[doc = " @brief enum with the fundamental DexTypes"]
pub type hfundamental_e = ::std::os::raw::c_uint;
pub const access_flags_e_ACCESS_FLAGS_NONE: access_flags_e = 0;
#[doc = "! No access flags"]
pub const access_flags_e_ACC_PUBLIC: access_flags_e = 1;
#[doc = "! public type"]
pub const access_flags_e_ACC_PRIVATE: access_flags_e = 2;
#[doc = "! private type"]
pub const access_flags_e_ACC_PROTECTED: access_flags_e = 4;
#[doc = "! protected type"]
pub const access_flags_e_ACC_STATIC: access_flags_e = 8;
#[doc = "! static (global) type"]
pub const access_flags_e_ACC_FINAL: access_flags_e = 16;
#[doc = "! final type (constant)"]
pub const access_flags_e_ACC_SYNCHRONIZED: access_flags_e = 32;
#[doc = "! synchronized"]
pub const access_flags_e_ACC_VOLATILE: access_flags_e = 64;
#[doc = "! Java volatile"]
pub const access_flags_e_ACC_BRIDGE: access_flags_e = 64;
#[doc = "!"]
pub const access_flags_e_ACC_TRANSIENT: access_flags_e = 128;
#[doc = "!"]
pub const access_flags_e_ACC_VARARGS: access_flags_e = 128;
#[doc = "!"]
pub const access_flags_e_ACC_NATIVE: access_flags_e = 256;
#[doc = "! native type"]
pub const access_flags_e_ACC_INTERFACE: access_flags_e = 512;
#[doc = "! interface type"]
pub const access_flags_e_ACC_ABSTRACT: access_flags_e = 1024;
#[doc = "! abstract type"]
pub const access_flags_e_ACC_STRICT: access_flags_e = 2048;
#[doc = "!"]
pub const access_flags_e_ACC_SYNTHETIC: access_flags_e = 4096;
#[doc = "!"]
pub const access_flags_e_ACC_ANNOTATION: access_flags_e = 8192;
#[doc = "!"]
pub const access_flags_e_ACC_ENUM: access_flags_e = 16384;
#[doc = "! enum type"]
pub const access_flags_e_UNUSED: access_flags_e = 32768;
#[doc = "!"]
pub const access_flags_e_ACC_CONSTRUCTOR: access_flags_e = 65536;
#[doc = "! constructor type"]
pub const access_flags_e_ACC_DECLARED_SYNCHRONIZED: access_flags_e = 131072;
#[doc = " @brief access flags from the Dalvik Virtual Machine"]
pub type access_flags_e = ::std::os::raw::c_uint;
#[doc = " @brief Structure which keeps information from a field\n this can be accessed from the class data"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdvmfield_t_ {
    #[doc = " @brief Name of the class the field belong to"]
    pub class_name: *const ::std::os::raw::c_char,
    #[doc = " @brief Name of the field"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = " @brief Type of the field"]
    pub type_: htype_e,
    #[doc = " @brief In case `type` == FUNDAMENTAL\n in case of ARRAY if the base type is\n a fundamental value, it contains that value"]
    pub fundamental_value: hfundamental_e,
    #[doc = " @brief String value of the type"]
    pub type_value: *const ::std::os::raw::c_char,
    #[doc = " @brief access flags from the field"]
    pub access_flags: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdvmfield_t_"][::std::mem::size_of::<hdvmfield_t_>() - 40usize];
    ["Alignment of hdvmfield_t_"][::std::mem::align_of::<hdvmfield_t_>() - 8usize];
    ["Offset of field: hdvmfield_t_::class_name"]
        [::std::mem::offset_of!(hdvmfield_t_, class_name) - 0usize];
    ["Offset of field: hdvmfield_t_::name"][::std::mem::offset_of!(hdvmfield_t_, name) - 8usize];
    ["Offset of field: hdvmfield_t_::type_"][::std::mem::offset_of!(hdvmfield_t_, type_) - 16usize];
    ["Offset of field: hdvmfield_t_::fundamental_value"]
        [::std::mem::offset_of!(hdvmfield_t_, fundamental_value) - 20usize];
    ["Offset of field: hdvmfield_t_::type_value"]
        [::std::mem::offset_of!(hdvmfield_t_, type_value) - 24usize];
    ["Offset of field: hdvmfield_t_::access_flags"]
        [::std::mem::offset_of!(hdvmfield_t_, access_flags) - 32usize];
};
#[doc = " @brief Structure which keeps information from a field\n this can be accessed from the class data"]
pub type hdvmfield_t = hdvmfield_t_;
#[doc = " @brief Structure which keeps information from a method\n this can be accessed from the class data"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdvmmethod_t_ {
    #[doc = " @brief Name of the class the method belongs to"]
    pub class_name: *const ::std::os::raw::c_char,
    #[doc = " @brief name of the method"]
    pub method_name: *const ::std::os::raw::c_char,
    #[doc = " @brief prototype of the method"]
    pub prototype: *const ::std::os::raw::c_char,
    #[doc = " @brief access flags"]
    pub access_flags: u16,
    #[doc = " @brief number of bytes from the code"]
    pub code_size: u32,
    #[doc = " @brief pointer to a code buffer"]
    pub code: *mut u8,
    #[doc = " @brief Full Dalvik name"]
    pub dalvik_name: *const ::std::os::raw::c_char,
    #[doc = " @brief Demangled name"]
    pub demangled_name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdvmmethod_t_"][::std::mem::size_of::<hdvmmethod_t_>() - 56usize];
    ["Alignment of hdvmmethod_t_"][::std::mem::align_of::<hdvmmethod_t_>() - 8usize];
    ["Offset of field: hdvmmethod_t_::class_name"]
        [::std::mem::offset_of!(hdvmmethod_t_, class_name) - 0usize];
    ["Offset of field: hdvmmethod_t_::method_name"]
        [::std::mem::offset_of!(hdvmmethod_t_, method_name) - 8usize];
    ["Offset of field: hdvmmethod_t_::prototype"]
        [::std::mem::offset_of!(hdvmmethod_t_, prototype) - 16usize];
    ["Offset of field: hdvmmethod_t_::access_flags"]
        [::std::mem::offset_of!(hdvmmethod_t_, access_flags) - 24usize];
    ["Offset of field: hdvmmethod_t_::code_size"]
        [::std::mem::offset_of!(hdvmmethod_t_, code_size) - 28usize];
    ["Offset of field: hdvmmethod_t_::code"][::std::mem::offset_of!(hdvmmethod_t_, code) - 32usize];
    ["Offset of field: hdvmmethod_t_::dalvik_name"]
        [::std::mem::offset_of!(hdvmmethod_t_, dalvik_name) - 40usize];
    ["Offset of field: hdvmmethod_t_::demangled_name"]
        [::std::mem::offset_of!(hdvmmethod_t_, demangled_name) - 48usize];
};
#[doc = " @brief Structure which keeps information from a method\n this can be accessed from the class data"]
pub type hdvmmethod_t = hdvmmethod_t_;
#[doc = " @brief Structure representing the classes in the DEX file"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdvmclass_t {
    #[doc = " @brief name of the class"]
    pub class_name: *const ::std::os::raw::c_char,
    #[doc = " @brief name of the super class"]
    pub super_class: *const ::std::os::raw::c_char,
    #[doc = " @brief name of the source file (if exists)"]
    pub source_file: *const ::std::os::raw::c_char,
    #[doc = " @brief access flags from the class"]
    pub access_flags: u16,
    #[doc = " @brief number of direct methods"]
    pub direct_methods_size: u16,
    #[doc = " @brief array of direct methods"]
    pub direct_methods: *mut hdvmmethod_t,
    #[doc = " @brief number of virtual methods"]
    pub virtual_methods_size: u16,
    #[doc = " @brief array of virtual methods"]
    pub virtual_methods: *mut hdvmmethod_t,
    #[doc = " @brief number of instance fields"]
    pub instance_fields_size: u16,
    #[doc = " @brief instance fields"]
    pub instance_fields: *mut hdvmfield_t,
    #[doc = " @brief number of static fields"]
    pub static_fields_size: u16,
    #[doc = " @brief static fields"]
    pub static_fields: *mut hdvmfield_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdvmclass_t"][::std::mem::size_of::<hdvmclass_t>() - 88usize];
    ["Alignment of hdvmclass_t"][::std::mem::align_of::<hdvmclass_t>() - 8usize];
    ["Offset of field: hdvmclass_t::class_name"]
        [::std::mem::offset_of!(hdvmclass_t, class_name) - 0usize];
    ["Offset of field: hdvmclass_t::super_class"]
        [::std::mem::offset_of!(hdvmclass_t, super_class) - 8usize];
    ["Offset of field: hdvmclass_t::source_file"]
        [::std::mem::offset_of!(hdvmclass_t, source_file) - 16usize];
    ["Offset of field: hdvmclass_t::access_flags"]
        [::std::mem::offset_of!(hdvmclass_t, access_flags) - 24usize];
    ["Offset of field: hdvmclass_t::direct_methods_size"]
        [::std::mem::offset_of!(hdvmclass_t, direct_methods_size) - 26usize];
    ["Offset of field: hdvmclass_t::direct_methods"]
        [::std::mem::offset_of!(hdvmclass_t, direct_methods) - 32usize];
    ["Offset of field: hdvmclass_t::virtual_methods_size"]
        [::std::mem::offset_of!(hdvmclass_t, virtual_methods_size) - 40usize];
    ["Offset of field: hdvmclass_t::virtual_methods"]
        [::std::mem::offset_of!(hdvmclass_t, virtual_methods) - 48usize];
    ["Offset of field: hdvmclass_t::instance_fields_size"]
        [::std::mem::offset_of!(hdvmclass_t, instance_fields_size) - 56usize];
    ["Offset of field: hdvmclass_t::instance_fields"]
        [::std::mem::offset_of!(hdvmclass_t, instance_fields) - 64usize];
    ["Offset of field: hdvmclass_t::static_fields_size"]
        [::std::mem::offset_of!(hdvmclass_t, static_fields_size) - 72usize];
    ["Offset of field: hdvmclass_t::static_fields"]
        [::std::mem::offset_of!(hdvmclass_t, static_fields) - 80usize];
};
pub const dexinsttype_e_DEX_INSTRUCTION00X: dexinsttype_e = 0;
pub const dexinsttype_e_DEX_INSTRUCTION10X: dexinsttype_e = 1;
pub const dexinsttype_e_DEX_INSTRUCTION12X: dexinsttype_e = 2;
pub const dexinsttype_e_DEX_INSTRUCTION11N: dexinsttype_e = 3;
pub const dexinsttype_e_DEX_INSTRUCTION11X: dexinsttype_e = 4;
pub const dexinsttype_e_DEX_INSTRUCTION10T: dexinsttype_e = 5;
pub const dexinsttype_e_DEX_INSTRUCTION20T: dexinsttype_e = 6;
pub const dexinsttype_e_DEX_INSTRUCTION20BC: dexinsttype_e = 7;
pub const dexinsttype_e_DEX_INSTRUCTION22X: dexinsttype_e = 8;
pub const dexinsttype_e_DEX_INSTRUCTION21T: dexinsttype_e = 9;
pub const dexinsttype_e_DEX_INSTRUCTION21S: dexinsttype_e = 10;
pub const dexinsttype_e_DEX_INSTRUCTION21H: dexinsttype_e = 11;
pub const dexinsttype_e_DEX_INSTRUCTION21C: dexinsttype_e = 12;
pub const dexinsttype_e_DEX_INSTRUCTION23X: dexinsttype_e = 13;
pub const dexinsttype_e_DEX_INSTRUCTION22B: dexinsttype_e = 14;
pub const dexinsttype_e_DEX_INSTRUCTION22T: dexinsttype_e = 15;
pub const dexinsttype_e_DEX_INSTRUCTION22S: dexinsttype_e = 16;
pub const dexinsttype_e_DEX_INSTRUCTION22C: dexinsttype_e = 17;
pub const dexinsttype_e_DEX_INSTRUCTION22CS: dexinsttype_e = 18;
pub const dexinsttype_e_DEX_INSTRUCTION30T: dexinsttype_e = 19;
pub const dexinsttype_e_DEX_INSTRUCTION32X: dexinsttype_e = 20;
pub const dexinsttype_e_DEX_INSTRUCTION31I: dexinsttype_e = 21;
pub const dexinsttype_e_DEX_INSTRUCTION31T: dexinsttype_e = 22;
pub const dexinsttype_e_DEX_INSTRUCTION31C: dexinsttype_e = 23;
pub const dexinsttype_e_DEX_INSTRUCTION35C: dexinsttype_e = 24;
pub const dexinsttype_e_DEX_INSTRUCTION3RC: dexinsttype_e = 25;
pub const dexinsttype_e_DEX_INSTRUCTION45CC: dexinsttype_e = 26;
pub const dexinsttype_e_DEX_INSTRUCTION4RCC: dexinsttype_e = 27;
pub const dexinsttype_e_DEX_INSTRUCTION51L: dexinsttype_e = 28;
pub const dexinsttype_e_DEX_PACKEDSWITCH: dexinsttype_e = 29;
pub const dexinsttype_e_DEX_SPARSESWITCH: dexinsttype_e = 30;
pub const dexinsttype_e_DEX_FILLARRAYDATA: dexinsttype_e = 31;
pub const dexinsttype_e_DEX_DALVIKINCORRECT: dexinsttype_e = 32;
pub const dexinsttype_e_DEX_NONE_OP: dexinsttype_e = 99;
#[doc = " @brief Instruction types from the Dalvik Virtual Machine"]
pub type dexinsttype_e = ::std::os::raw::c_uint;
#[doc = " @brief Structure for an instruction in the dalvik virtual machine"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdvminstruction_t_ {
    #[doc = " @brief Instruction type enum"]
    pub instruction_type: dexinsttype_e,
    #[doc = " @brief length of the instruction"]
    pub instruction_length: u32,
    #[doc = " @brief idx of the instruction"]
    pub address: u64,
    #[doc = " @brief opcode of the instruction"]
    pub op: u32,
    #[doc = " @brief Disassembly of the instruction"]
    pub disassembly: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdvminstruction_t_"][::std::mem::size_of::<hdvminstruction_t_>() - 32usize];
    ["Alignment of hdvminstruction_t_"][::std::mem::align_of::<hdvminstruction_t_>() - 8usize];
    ["Offset of field: hdvminstruction_t_::instruction_type"]
        [::std::mem::offset_of!(hdvminstruction_t_, instruction_type) - 0usize];
    ["Offset of field: hdvminstruction_t_::instruction_length"]
        [::std::mem::offset_of!(hdvminstruction_t_, instruction_length) - 4usize];
    ["Offset of field: hdvminstruction_t_::address"]
        [::std::mem::offset_of!(hdvminstruction_t_, address) - 8usize];
    ["Offset of field: hdvminstruction_t_::op"]
        [::std::mem::offset_of!(hdvminstruction_t_, op) - 16usize];
    ["Offset of field: hdvminstruction_t_::disassembly"]
        [::std::mem::offset_of!(hdvminstruction_t_, disassembly) - 24usize];
};
#[doc = " @brief Structure for an instruction in the dalvik virtual machine"]
pub type hdvminstruction_t = hdvminstruction_t_;
#[doc = " @brief Structure that keeps information about a handler"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dvmhandler_data_t_ {
    #[doc = " @brief type of handled exception"]
    pub handler_type: *const ::std::os::raw::c_char,
    #[doc = " @brief start address of the handler"]
    pub handler_start_addr: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dvmhandler_data_t_"][::std::mem::size_of::<dvmhandler_data_t_>() - 16usize];
    ["Alignment of dvmhandler_data_t_"][::std::mem::align_of::<dvmhandler_data_t_>() - 8usize];
    ["Offset of field: dvmhandler_data_t_::handler_type"]
        [::std::mem::offset_of!(dvmhandler_data_t_, handler_type) - 0usize];
    ["Offset of field: dvmhandler_data_t_::handler_start_addr"]
        [::std::mem::offset_of!(dvmhandler_data_t_, handler_start_addr) - 8usize];
};
#[doc = " @brief Structure that keeps information about a handler"]
pub type dvmhandler_data_t = dvmhandler_data_t_;
#[doc = " @brief Structure with the information from the exceptions\n in the code"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dvmexceptions_data_t_ {
    #[doc = " @brief start address of the try"]
    pub try_value_start_addr: u64,
    #[doc = " @brief last address from the try"]
    pub try_value_end_addr: u64,
    #[doc = " @brief number of handlers associated with the try"]
    pub n_of_handlers: usize,
    #[doc = " @brief pointer to an array of dvmhandler_data_t"]
    pub handler: *mut dvmhandler_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dvmexceptions_data_t_"][::std::mem::size_of::<dvmexceptions_data_t_>() - 32usize];
    ["Alignment of dvmexceptions_data_t_"]
        [::std::mem::align_of::<dvmexceptions_data_t_>() - 8usize];
    ["Offset of field: dvmexceptions_data_t_::try_value_start_addr"]
        [::std::mem::offset_of!(dvmexceptions_data_t_, try_value_start_addr) - 0usize];
    ["Offset of field: dvmexceptions_data_t_::try_value_end_addr"]
        [::std::mem::offset_of!(dvmexceptions_data_t_, try_value_end_addr) - 8usize];
    ["Offset of field: dvmexceptions_data_t_::n_of_handlers"]
        [::std::mem::offset_of!(dvmexceptions_data_t_, n_of_handlers) - 16usize];
    ["Offset of field: dvmexceptions_data_t_::handler"]
        [::std::mem::offset_of!(dvmexceptions_data_t_, handler) - 24usize];
};
#[doc = " @brief Structure with the information from the exceptions\n in the code"]
pub type dvmexceptions_data_t = dvmexceptions_data_t_;
#[doc = " @brief Structure that represents a disassembled method from\n the dalvik file"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dvmdisassembled_method_t_ {
    #[doc = " @brief pointer to the method"]
    pub method_id: *mut hdvmmethod_t,
    #[doc = " @brief number of registers"]
    pub n_of_registers: u16,
    #[doc = " @brief number of exception information structures"]
    pub n_of_exceptions: usize,
    #[doc = " @brief all the exceptions from the method"]
    pub exception_information: *mut dvmexceptions_data_t,
    #[doc = " @brief number of instructions in the method"]
    pub n_of_instructions: usize,
    #[doc = " @brief array of all the instructions in the method"]
    pub instructions: *mut hdvminstruction_t,
    #[doc = " @brief Full disassembled method"]
    pub method_string: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dvmdisassembled_method_t_"]
        [::std::mem::size_of::<dvmdisassembled_method_t_>() - 56usize];
    ["Alignment of dvmdisassembled_method_t_"]
        [::std::mem::align_of::<dvmdisassembled_method_t_>() - 8usize];
    ["Offset of field: dvmdisassembled_method_t_::method_id"]
        [::std::mem::offset_of!(dvmdisassembled_method_t_, method_id) - 0usize];
    ["Offset of field: dvmdisassembled_method_t_::n_of_registers"]
        [::std::mem::offset_of!(dvmdisassembled_method_t_, n_of_registers) - 8usize];
    ["Offset of field: dvmdisassembled_method_t_::n_of_exceptions"]
        [::std::mem::offset_of!(dvmdisassembled_method_t_, n_of_exceptions) - 16usize];
    ["Offset of field: dvmdisassembled_method_t_::exception_information"]
        [::std::mem::offset_of!(dvmdisassembled_method_t_, exception_information) - 24usize];
    ["Offset of field: dvmdisassembled_method_t_::n_of_instructions"]
        [::std::mem::offset_of!(dvmdisassembled_method_t_, n_of_instructions) - 32usize];
    ["Offset of field: dvmdisassembled_method_t_::instructions"]
        [::std::mem::offset_of!(dvmdisassembled_method_t_, instructions) - 40usize];
    ["Offset of field: dvmdisassembled_method_t_::method_string"]
        [::std::mem::offset_of!(dvmdisassembled_method_t_, method_string) - 48usize];
};
#[doc = " @brief Structure that represents a disassembled method from\n the dalvik file"]
pub type dvmdisassembled_method_t = dvmdisassembled_method_t_;
pub const ref_type_REF_NEW_INSTANCE: ref_type = 34;
pub const ref_type_REF_CLASS_USAGE: ref_type = 28;
pub const ref_type_INVOKE_VIRTUAL: ref_type = 110;
pub const ref_type_INVOKE_SUPER: ref_type = 111;
pub const ref_type_INVOKE_DIRECT: ref_type = 112;
pub const ref_type_INVOKE_STATIC: ref_type = 113;
pub const ref_type_INVOKE_INTERFACE: ref_type = 114;
pub const ref_type_INVOKE_VIRTUAL_RANGE: ref_type = 116;
pub const ref_type_INVOKE_SUPER_RANGE: ref_type = 117;
pub const ref_type_INVOKE_DIRECT_RANGE: ref_type = 118;
pub const ref_type_INVOKE_STATIC_RANGE: ref_type = 119;
pub const ref_type_INVOKE_INTERFACE_RANGE: ref_type = 120;
#[doc = "--------------------------- Analysis Data ---------------------------"]
pub type ref_type = ::std::os::raw::c_uint;
#[doc = " @brief Structure to keep information about the class analysis"]
pub type hdvmclassanalysis_t = hdvmclassanalysis_t_;
#[doc = " @brief Structure to keep information about the method analysis"]
pub type hdvmmethodanalysis_t = hdvmmethodanalysis_t_;
#[doc = " @brief FieldAnalysis structure"]
pub type hdvmfieldanalysis_t = hdvmfieldanalysis_t_;
#[doc = " @brief Xref that contains class, method and instruction address"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdvm_class_method_idx_t_ {
    #[doc = " @brief class of the xref"]
    pub cls: *mut hdvmclassanalysis_t,
    #[doc = " @brief method of the xref"]
    pub method: *mut hdvmmethodanalysis_t,
    #[doc = " @brief idx"]
    pub idx: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdvm_class_method_idx_t_"]
        [::std::mem::size_of::<hdvm_class_method_idx_t_>() - 24usize];
    ["Alignment of hdvm_class_method_idx_t_"]
        [::std::mem::align_of::<hdvm_class_method_idx_t_>() - 8usize];
    ["Offset of field: hdvm_class_method_idx_t_::cls"]
        [::std::mem::offset_of!(hdvm_class_method_idx_t_, cls) - 0usize];
    ["Offset of field: hdvm_class_method_idx_t_::method"]
        [::std::mem::offset_of!(hdvm_class_method_idx_t_, method) - 8usize];
    ["Offset of field: hdvm_class_method_idx_t_::idx"]
        [::std::mem::offset_of!(hdvm_class_method_idx_t_, idx) - 16usize];
};
#[doc = " @brief Xref that contains class, method and instruction address"]
pub type hdvm_class_method_idx_t = hdvm_class_method_idx_t_;
#[doc = " @brief xref that contains a method and instruction address"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdvm_method_idx_t_ {
    pub method: *mut hdvmmethodanalysis_t,
    pub idx: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdvm_method_idx_t_"][::std::mem::size_of::<hdvm_method_idx_t_>() - 16usize];
    ["Alignment of hdvm_method_idx_t_"][::std::mem::align_of::<hdvm_method_idx_t_>() - 8usize];
    ["Offset of field: hdvm_method_idx_t_::method"]
        [::std::mem::offset_of!(hdvm_method_idx_t_, method) - 0usize];
    ["Offset of field: hdvm_method_idx_t_::idx"]
        [::std::mem::offset_of!(hdvm_method_idx_t_, idx) - 8usize];
};
#[doc = " @brief xref that contains a method and instruction address"]
pub type hdvm_method_idx_t = hdvm_method_idx_t_;
#[doc = " @brief Xref that contains class, field and instruction address"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdvm_class_field_idx_t_ {
    #[doc = " @brief class of the xref"]
    pub cls: *mut hdvmclassanalysis_t,
    #[doc = " @brief field of the xref"]
    pub field: *mut hdvmfieldanalysis_t,
    #[doc = " @brief idx"]
    pub idx: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdvm_class_field_idx_t_"][::std::mem::size_of::<hdvm_class_field_idx_t_>() - 24usize];
    ["Alignment of hdvm_class_field_idx_t_"]
        [::std::mem::align_of::<hdvm_class_field_idx_t_>() - 8usize];
    ["Offset of field: hdvm_class_field_idx_t_::cls"]
        [::std::mem::offset_of!(hdvm_class_field_idx_t_, cls) - 0usize];
    ["Offset of field: hdvm_class_field_idx_t_::field"]
        [::std::mem::offset_of!(hdvm_class_field_idx_t_, field) - 8usize];
    ["Offset of field: hdvm_class_field_idx_t_::idx"]
        [::std::mem::offset_of!(hdvm_class_field_idx_t_, idx) - 16usize];
};
#[doc = " @brief Xref that contains class, field and instruction address"]
pub type hdvm_class_field_idx_t = hdvm_class_field_idx_t_;
#[doc = " @brief Xref that contains class and instruction address"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdvm_class_idx_t_ {
    #[doc = " @brief class of the xref"]
    pub cls: *mut hdvmclassanalysis_t,
    #[doc = " @brief idx"]
    pub idx: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdvm_class_idx_t_"][::std::mem::size_of::<hdvm_class_idx_t_>() - 16usize];
    ["Alignment of hdvm_class_idx_t_"][::std::mem::align_of::<hdvm_class_idx_t_>() - 8usize];
    ["Offset of field: hdvm_class_idx_t_::cls"]
        [::std::mem::offset_of!(hdvm_class_idx_t_, cls) - 0usize];
    ["Offset of field: hdvm_class_idx_t_::idx"]
        [::std::mem::offset_of!(hdvm_class_idx_t_, idx) - 8usize];
};
#[doc = " @brief Xref that contains class and instruction address"]
pub type hdvm_class_idx_t = hdvm_class_idx_t_;
#[doc = " @brief Structure that contains a type of reference, a method analysis where reference is\n and the idx in the method where the reference to a class is"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdvm_reftype_method_idx_t_ {
    pub reType: ref_type,
    pub methodAnalysis: *mut hdvmmethodanalysis_t,
    pub idx: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdvm_reftype_method_idx_t_"]
        [::std::mem::size_of::<hdvm_reftype_method_idx_t_>() - 24usize];
    ["Alignment of hdvm_reftype_method_idx_t_"]
        [::std::mem::align_of::<hdvm_reftype_method_idx_t_>() - 8usize];
    ["Offset of field: hdvm_reftype_method_idx_t_::reType"]
        [::std::mem::offset_of!(hdvm_reftype_method_idx_t_, reType) - 0usize];
    ["Offset of field: hdvm_reftype_method_idx_t_::methodAnalysis"]
        [::std::mem::offset_of!(hdvm_reftype_method_idx_t_, methodAnalysis) - 8usize];
    ["Offset of field: hdvm_reftype_method_idx_t_::idx"]
        [::std::mem::offset_of!(hdvm_reftype_method_idx_t_, idx) - 16usize];
};
#[doc = " @brief Structure that contains a type of reference, a method analysis where reference is\n and the idx in the method where the reference to a class is"]
pub type hdvm_reftype_method_idx_t = hdvm_reftype_method_idx_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdvm_classxref_t_ {
    pub classAnalysis: *mut hdvmclassanalysis_t,
    pub n_of_reftype_method_idx: usize,
    pub hdvmReftypeMethodIdx: *mut hdvm_reftype_method_idx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdvm_classxref_t_"][::std::mem::size_of::<hdvm_classxref_t_>() - 24usize];
    ["Alignment of hdvm_classxref_t_"][::std::mem::align_of::<hdvm_classxref_t_>() - 8usize];
    ["Offset of field: hdvm_classxref_t_::classAnalysis"]
        [::std::mem::offset_of!(hdvm_classxref_t_, classAnalysis) - 0usize];
    ["Offset of field: hdvm_classxref_t_::n_of_reftype_method_idx"]
        [::std::mem::offset_of!(hdvm_classxref_t_, n_of_reftype_method_idx) - 8usize];
    ["Offset of field: hdvm_classxref_t_::hdvmReftypeMethodIdx"]
        [::std::mem::offset_of!(hdvm_classxref_t_, hdvmReftypeMethodIdx) - 16usize];
};
pub type hdvm_classxref_t = hdvm_classxref_t_;
#[doc = " @brief Structure that stores information of a basic block"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdvmbasicblock_t_ {
    #[doc = " @brief Number of instructions in the block"]
    pub n_of_instructions: usize,
    #[doc = " @brief Pointer to the instructions in the block"]
    pub instructions: *mut hdvminstruction_t,
    #[doc = " @brief Is it a try block?"]
    pub try_block: ::std::os::raw::c_int,
    #[doc = " @brief Is it a catch block"]
    pub catch_block: ::std::os::raw::c_int,
    #[doc = " @brief String value of the handler type"]
    pub handler_type: *const ::std::os::raw::c_char,
    #[doc = " @brief Name of the basic block"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = " @brief Whole representation of a basic block in string format"]
    pub block_string: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdvmbasicblock_t_"][::std::mem::size_of::<hdvmbasicblock_t_>() - 48usize];
    ["Alignment of hdvmbasicblock_t_"][::std::mem::align_of::<hdvmbasicblock_t_>() - 8usize];
    ["Offset of field: hdvmbasicblock_t_::n_of_instructions"]
        [::std::mem::offset_of!(hdvmbasicblock_t_, n_of_instructions) - 0usize];
    ["Offset of field: hdvmbasicblock_t_::instructions"]
        [::std::mem::offset_of!(hdvmbasicblock_t_, instructions) - 8usize];
    ["Offset of field: hdvmbasicblock_t_::try_block"]
        [::std::mem::offset_of!(hdvmbasicblock_t_, try_block) - 16usize];
    ["Offset of field: hdvmbasicblock_t_::catch_block"]
        [::std::mem::offset_of!(hdvmbasicblock_t_, catch_block) - 20usize];
    ["Offset of field: hdvmbasicblock_t_::handler_type"]
        [::std::mem::offset_of!(hdvmbasicblock_t_, handler_type) - 24usize];
    ["Offset of field: hdvmbasicblock_t_::name"]
        [::std::mem::offset_of!(hdvmbasicblock_t_, name) - 32usize];
    ["Offset of field: hdvmbasicblock_t_::block_string"]
        [::std::mem::offset_of!(hdvmbasicblock_t_, block_string) - 40usize];
};
#[doc = " @brief Structure that stores information of a basic block"]
pub type hdvmbasicblock_t = hdvmbasicblock_t_;
#[doc = " @brief Structure to keep all the basic blocks"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basic_blocks_t_ {
    #[doc = " @brief Number of basic blocks"]
    pub n_of_blocks: usize,
    #[doc = " @brief pointer to an array of basic blocks"]
    pub blocks: *mut hdvmbasicblock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of basic_blocks_t_"][::std::mem::size_of::<basic_blocks_t_>() - 16usize];
    ["Alignment of basic_blocks_t_"][::std::mem::align_of::<basic_blocks_t_>() - 8usize];
    ["Offset of field: basic_blocks_t_::n_of_blocks"]
        [::std::mem::offset_of!(basic_blocks_t_, n_of_blocks) - 0usize];
    ["Offset of field: basic_blocks_t_::blocks"]
        [::std::mem::offset_of!(basic_blocks_t_, blocks) - 8usize];
};
#[doc = " @brief Structure to keep all the basic blocks"]
pub type basic_blocks_t = basic_blocks_t_;
#[doc = " @brief FieldAnalysis structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdvmfieldanalysis_t_ {
    #[doc = " @brief Full name of the FieldAnalysis"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = " @brief Number of xrefread"]
    pub n_of_xrefread: usize,
    #[doc = " @brief xrefread"]
    pub xrefread: *mut hdvm_class_method_idx_t,
    #[doc = " @brief Number of xrefwrite"]
    pub n_of_xrefwrite: usize,
    #[doc = " @brief xrefwrite"]
    pub xrefwrite: *mut hdvm_class_method_idx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdvmfieldanalysis_t_"][::std::mem::size_of::<hdvmfieldanalysis_t_>() - 40usize];
    ["Alignment of hdvmfieldanalysis_t_"][::std::mem::align_of::<hdvmfieldanalysis_t_>() - 8usize];
    ["Offset of field: hdvmfieldanalysis_t_::name"]
        [::std::mem::offset_of!(hdvmfieldanalysis_t_, name) - 0usize];
    ["Offset of field: hdvmfieldanalysis_t_::n_of_xrefread"]
        [::std::mem::offset_of!(hdvmfieldanalysis_t_, n_of_xrefread) - 8usize];
    ["Offset of field: hdvmfieldanalysis_t_::xrefread"]
        [::std::mem::offset_of!(hdvmfieldanalysis_t_, xrefread) - 16usize];
    ["Offset of field: hdvmfieldanalysis_t_::n_of_xrefwrite"]
        [::std::mem::offset_of!(hdvmfieldanalysis_t_, n_of_xrefwrite) - 24usize];
    ["Offset of field: hdvmfieldanalysis_t_::xrefwrite"]
        [::std::mem::offset_of!(hdvmfieldanalysis_t_, xrefwrite) - 32usize];
};
#[doc = " @brief Structure to keep information about the string analysis\n [UNUSED FOR NOW]"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdvmstringanalysis_t_ {
    #[doc = " @brief value of that string"]
    pub value: *const ::std::os::raw::c_char,
    #[doc = " @brief number of xreffrom"]
    pub n_of_xreffrom: usize,
    #[doc = " @brief xreffrom"]
    pub xreffrom: *mut hdvm_class_method_idx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdvmstringanalysis_t_"][::std::mem::size_of::<hdvmstringanalysis_t_>() - 24usize];
    ["Alignment of hdvmstringanalysis_t_"]
        [::std::mem::align_of::<hdvmstringanalysis_t_>() - 8usize];
    ["Offset of field: hdvmstringanalysis_t_::value"]
        [::std::mem::offset_of!(hdvmstringanalysis_t_, value) - 0usize];
    ["Offset of field: hdvmstringanalysis_t_::n_of_xreffrom"]
        [::std::mem::offset_of!(hdvmstringanalysis_t_, n_of_xreffrom) - 8usize];
    ["Offset of field: hdvmstringanalysis_t_::xreffrom"]
        [::std::mem::offset_of!(hdvmstringanalysis_t_, xreffrom) - 16usize];
};
#[doc = " @brief Structure to keep information about the string analysis\n [UNUSED FOR NOW]"]
pub type hdvmstringanalysis_t = hdvmstringanalysis_t_;
#[doc = " @brief Structure to keep information about the method analysis"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdvmmethodanalysis_t_ {
    #[doc = " @brief name of the method"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = " @brief descriptor of the method"]
    pub descriptor: *const ::std::os::raw::c_char,
    #[doc = " @brief full name of the method including class name and descriptor"]
    pub full_name: *const ::std::os::raw::c_char,
    #[doc = " @brief flag indicating if the method is external or not"]
    pub external: ::std::os::raw::c_int,
    #[doc = " @brief flag indicating if the method is an android API"]
    pub is_android_api: ::std::os::raw::c_int,
    #[doc = " @brief access flags"]
    pub access_flags: access_flags_e,
    #[doc = " @brief class name"]
    pub class_name: *const ::std::os::raw::c_char,
    #[doc = " @brief basic blocks"]
    pub basic_blocks: *mut basic_blocks_t,
    #[doc = " @brief number of field read in method"]
    pub n_of_xrefread: usize,
    #[doc = " @brief xrefs of field read"]
    pub xrefread: *mut hdvm_class_field_idx_t,
    #[doc = " @brief number of field write"]
    pub n_of_xrefwrite: usize,
    #[doc = " @brief xrefs of field write"]
    pub xrefwrite: *mut hdvm_class_field_idx_t,
    #[doc = " @brief number of xrefto"]
    pub n_of_xrefto: usize,
    #[doc = " @brief methods called from the current method"]
    pub xrefto: *mut hdvm_class_method_idx_t,
    #[doc = " @brief number of xreffrom"]
    pub n_of_xreffrom: usize,
    #[doc = " @brief methods that call the current method"]
    pub xreffrom: *mut hdvm_class_method_idx_t,
    #[doc = " @brief Number of xrefnewinstance"]
    pub n_of_xrefnewinstance: usize,
    #[doc = " @brief new instance of the method"]
    pub xrefnewinstance: *mut hdvm_class_idx_t,
    #[doc = " @brief Number of xrefconstclass"]
    pub n_of_xrefconstclass: usize,
    #[doc = " @brief use of const class"]
    pub xrefconstclass: *mut hdvm_class_idx_t,
    #[doc = " @brief cache of method string"]
    pub method_string: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdvmmethodanalysis_t_"][::std::mem::size_of::<hdvmmethodanalysis_t_>() - 160usize];
    ["Alignment of hdvmmethodanalysis_t_"]
        [::std::mem::align_of::<hdvmmethodanalysis_t_>() - 8usize];
    ["Offset of field: hdvmmethodanalysis_t_::name"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, name) - 0usize];
    ["Offset of field: hdvmmethodanalysis_t_::descriptor"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, descriptor) - 8usize];
    ["Offset of field: hdvmmethodanalysis_t_::full_name"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, full_name) - 16usize];
    ["Offset of field: hdvmmethodanalysis_t_::external"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, external) - 24usize];
    ["Offset of field: hdvmmethodanalysis_t_::is_android_api"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, is_android_api) - 28usize];
    ["Offset of field: hdvmmethodanalysis_t_::access_flags"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, access_flags) - 32usize];
    ["Offset of field: hdvmmethodanalysis_t_::class_name"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, class_name) - 40usize];
    ["Offset of field: hdvmmethodanalysis_t_::basic_blocks"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, basic_blocks) - 48usize];
    ["Offset of field: hdvmmethodanalysis_t_::n_of_xrefread"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, n_of_xrefread) - 56usize];
    ["Offset of field: hdvmmethodanalysis_t_::xrefread"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, xrefread) - 64usize];
    ["Offset of field: hdvmmethodanalysis_t_::n_of_xrefwrite"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, n_of_xrefwrite) - 72usize];
    ["Offset of field: hdvmmethodanalysis_t_::xrefwrite"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, xrefwrite) - 80usize];
    ["Offset of field: hdvmmethodanalysis_t_::n_of_xrefto"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, n_of_xrefto) - 88usize];
    ["Offset of field: hdvmmethodanalysis_t_::xrefto"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, xrefto) - 96usize];
    ["Offset of field: hdvmmethodanalysis_t_::n_of_xreffrom"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, n_of_xreffrom) - 104usize];
    ["Offset of field: hdvmmethodanalysis_t_::xreffrom"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, xreffrom) - 112usize];
    ["Offset of field: hdvmmethodanalysis_t_::n_of_xrefnewinstance"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, n_of_xrefnewinstance) - 120usize];
    ["Offset of field: hdvmmethodanalysis_t_::xrefnewinstance"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, xrefnewinstance) - 128usize];
    ["Offset of field: hdvmmethodanalysis_t_::n_of_xrefconstclass"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, n_of_xrefconstclass) - 136usize];
    ["Offset of field: hdvmmethodanalysis_t_::xrefconstclass"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, xrefconstclass) - 144usize];
    ["Offset of field: hdvmmethodanalysis_t_::method_string"]
        [::std::mem::offset_of!(hdvmmethodanalysis_t_, method_string) - 152usize];
};
#[doc = " @brief Structure to keep information about the class analysis"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdvmclassanalysis_t_ {
    #[doc = " @brief is external class?"]
    pub is_external: ::std::os::raw::c_int,
    #[doc = " @brief Name of the class it extends"]
    pub extends_: *const ::std::os::raw::c_char,
    #[doc = " @brief name of the class"]
    pub name_: *const ::std::os::raw::c_char,
    #[doc = " @brief number of methods"]
    pub n_of_methods: usize,
    #[doc = " @brief pointer to an array of methods"]
    pub methods: *mut *mut hdvmmethodanalysis_t,
    #[doc = " @brief number of fields"]
    pub n_of_fields: usize,
    #[doc = " @brief pointer to an array of fields"]
    pub fields: *mut *mut hdvmfieldanalysis_t,
    #[doc = " @brief number of xrefnewinstance"]
    pub n_of_xrefnewinstance: usize,
    #[doc = " @brief New instance of this class"]
    pub xrefnewinstance: *mut hdvm_method_idx_t,
    #[doc = " @brief number of const class"]
    pub n_of_xrefconstclass: usize,
    #[doc = " @brief use of const class of this class"]
    pub xrefconstclass: *mut hdvm_method_idx_t,
    #[doc = " @brief number of xrefto"]
    pub n_of_xrefto: usize,
    #[doc = " @brief Classes that this class calls"]
    pub xrefto: *mut hdvm_classxref_t,
    #[doc = " @brief number of xreffrom"]
    pub n_of_xreffrom: usize,
    #[doc = " @brief Classes that call this class"]
    pub xreffrom: *mut hdvm_classxref_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdvmclassanalysis_t_"][::std::mem::size_of::<hdvmclassanalysis_t_>() - 120usize];
    ["Alignment of hdvmclassanalysis_t_"][::std::mem::align_of::<hdvmclassanalysis_t_>() - 8usize];
    ["Offset of field: hdvmclassanalysis_t_::is_external"]
        [::std::mem::offset_of!(hdvmclassanalysis_t_, is_external) - 0usize];
    ["Offset of field: hdvmclassanalysis_t_::extends_"]
        [::std::mem::offset_of!(hdvmclassanalysis_t_, extends_) - 8usize];
    ["Offset of field: hdvmclassanalysis_t_::name_"]
        [::std::mem::offset_of!(hdvmclassanalysis_t_, name_) - 16usize];
    ["Offset of field: hdvmclassanalysis_t_::n_of_methods"]
        [::std::mem::offset_of!(hdvmclassanalysis_t_, n_of_methods) - 24usize];
    ["Offset of field: hdvmclassanalysis_t_::methods"]
        [::std::mem::offset_of!(hdvmclassanalysis_t_, methods) - 32usize];
    ["Offset of field: hdvmclassanalysis_t_::n_of_fields"]
        [::std::mem::offset_of!(hdvmclassanalysis_t_, n_of_fields) - 40usize];
    ["Offset of field: hdvmclassanalysis_t_::fields"]
        [::std::mem::offset_of!(hdvmclassanalysis_t_, fields) - 48usize];
    ["Offset of field: hdvmclassanalysis_t_::n_of_xrefnewinstance"]
        [::std::mem::offset_of!(hdvmclassanalysis_t_, n_of_xrefnewinstance) - 56usize];
    ["Offset of field: hdvmclassanalysis_t_::xrefnewinstance"]
        [::std::mem::offset_of!(hdvmclassanalysis_t_, xrefnewinstance) - 64usize];
    ["Offset of field: hdvmclassanalysis_t_::n_of_xrefconstclass"]
        [::std::mem::offset_of!(hdvmclassanalysis_t_, n_of_xrefconstclass) - 72usize];
    ["Offset of field: hdvmclassanalysis_t_::xrefconstclass"]
        [::std::mem::offset_of!(hdvmclassanalysis_t_, xrefconstclass) - 80usize];
    ["Offset of field: hdvmclassanalysis_t_::n_of_xrefto"]
        [::std::mem::offset_of!(hdvmclassanalysis_t_, n_of_xrefto) - 88usize];
    ["Offset of field: hdvmclassanalysis_t_::xrefto"]
        [::std::mem::offset_of!(hdvmclassanalysis_t_, xrefto) - 96usize];
    ["Offset of field: hdvmclassanalysis_t_::n_of_xreffrom"]
        [::std::mem::offset_of!(hdvmclassanalysis_t_, n_of_xreffrom) - 104usize];
    ["Offset of field: hdvmclassanalysis_t_::xreffrom"]
        [::std::mem::offset_of!(hdvmclassanalysis_t_, xreffrom) - 112usize];
};
unsafe extern "C" {
    #[doc = " @brief main method from the DEX Core API\n it parses the DEX file and it retrieves a context object\n @param filePath path to the DEX file to analyze\n @return context object to obtain information from the DEX file"]
    pub fn parse_dex(filePath: *const ::std::os::raw::c_char) -> hDexContext;
}
unsafe extern "C" {
    #[doc = " @brief Since the context object use dynamic memory this method\n will properly destroy the object.\n @param context object to destroys"]
    pub fn destroy_dex(context: hDexContext);
}
unsafe extern "C" {
    #[doc = " @brief Get the number of strings from the DEX file\n @param context from the DEX file\n @return number of strings"]
    pub fn get_number_of_strings(context: hDexContext) -> usize;
}
unsafe extern "C" {
    #[doc = " @brief get one of the strings by the id\n @param context from where to retrieve the string\n @param i id of the string to retrieve\n @return string from the id"]
    pub fn get_string_by_id(context: hDexContext, i: usize) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " @brief Get the number of classes from the DEX file\n @param context dex from where to retrieve the number of classes\n @return number of classes"]
    pub fn get_number_of_classes(context: hDexContext) -> u16;
}
unsafe extern "C" {
    #[doc = " @brief Get a class structure given an ID\n @param context DEX from where to retrieve the class\n @param i id of the class to retrieve\n @return class from the DEX file"]
    pub fn get_class_by_id(context: hDexContext, i: u16) -> *mut hdvmclass_t;
}
unsafe extern "C" {
    #[doc = " @brief Get a class structure given a class name\n @param context DEX from where to retrieve the class\n @param class_name name of the class to retrieve\n @return class from the DEX file"]
    pub fn get_class_by_name(
        context: hDexContext,
        class_name: *const ::std::os::raw::c_char,
    ) -> *mut hdvmclass_t;
}
unsafe extern "C" {
    #[doc = " @brief Get a method structure given a full dalvik name.\n @param context DEX from where to retrieve the method\n @param method_name LclassName;->methodName(parameters)RetType\n @return pointer to hdvmmethod_t, null if the method does not exist"]
    pub fn get_method_by_name(
        context: hDexContext,
        method_name: *const ::std::os::raw::c_char,
    ) -> *mut hdvmmethod_t;
}
unsafe extern "C" {
    #[doc = " @brief Disassemble a DEX file and generate an internal DexDisassembler\n @param context DEX to disassemble the methods"]
    pub fn disassemble_dex(context: hDexContext);
}
unsafe extern "C" {
    #[doc = " @brief Get a method structure given a full dalvik name.\n @param context DEX from where to retrieve the method\n @param method_name LclassName;->methodName(parameters)RetType\n @return pointer to a disassembled method"]
    pub fn get_disassembled_method(
        context: hDexContext,
        method_name: *const ::std::os::raw::c_char,
    ) -> *mut dvmdisassembled_method_t;
}
unsafe extern "C" {
    #[doc = " @brief Create a DEX analysis object inside of context, for obtaining the analysis\n user must also call `analyze_classes`.\n @param context context from the CORE API\n @param create_xrefs boolean to generate or not xrefs (analysis takes longer)"]
    pub fn create_dex_analysis(context: hDexContext, create_xrefs: ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[doc = " @brief Analyze the classes, add fields and methods into the classes, optionally\n create the xrefs.\n @param context context from the CORE API"]
    pub fn analyze_classes(context: hDexContext);
}
unsafe extern "C" {
    #[doc = " @brief Obtain one hdvmclassanalysis_t given its hdvmclass_t\n @param context DEX context from the CORE API\n @param class_ hdvmclass_t to get its analysis"]
    pub fn get_analyzed_class_by_hdvmclass(
        context: hDexContext,
        class_: *mut hdvmclass_t,
    ) -> *mut hdvmclassanalysis_t;
}
unsafe extern "C" {
    #[doc = " @brief Obtain one hdvmclassanalysis_t given its name.\n @param context DEX context from the CORE API\n @param class_name name of the class to retrieve"]
    pub fn get_analyzed_class(
        context: hDexContext,
        class_name: *const ::std::os::raw::c_char,
    ) -> *mut hdvmclassanalysis_t;
}
unsafe extern "C" {
    #[doc = " @brief Obtain one hdvmmethodanalysis_t given its hdvmmethod_t\n @param context DEX context from the CORE API\n @param method hdvmmethod_t to get its analysis"]
    pub fn get_analyzed_method_by_hdvmmethod(
        context: hDexContext,
        method: *mut hdvmmethod_t,
    ) -> *mut hdvmmethodanalysis_t;
}
unsafe extern "C" {
    #[doc = " @brief Obtain one hdvmmethodanalysis_t given its name\n @param context DEX context from the CORE API\n @param method_full_name dalvik name of the method"]
    pub fn get_analyzed_method(
        context: hDexContext,
        method_full_name: *const ::std::os::raw::c_char,
    ) -> *mut hdvmmethodanalysis_t;
}
unsafe extern "C" {
    #[doc = " @brief main method from the APK Core API\n it parses the APK file and it retrieves a context object\n @param filePath path to the APK file to analyze\n @param create_xref `1` to create xrefs, `0` to avoid creating xrefs\n @return context object to obtain information from the APK file"]
    pub fn parse_apk(
        filePath: *const ::std::os::raw::c_char,
        create_xref: boolean_e,
    ) -> hApkContext;
}
unsafe extern "C" {
    #[doc = " @brief Since the context object use dynamic memory this method\n will properly destroy the object.\n @param context object to destroys"]
    pub fn destroy_apk(context: hApkContext);
}
unsafe extern "C" {
    #[doc = " @brief APKs contain a number of DEX files with the classes,\n with this you retrieve the number of those dex files\n @return number of dex files in the APK"]
    pub fn get_number_of_dex_files(context: hApkContext) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @brief Given an idx retrieve the name of one of the dex files\n @param idx index of the dex file to retrieve\n @return a string with the path of the dex file in the apk"]
    pub fn get_dex_file_by_index(
        context: hApkContext,
        idx: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " @brief Every dex file contains a number of classes, retrieve it by\n the name of the dex file\n @param dex_file file to retrieve the number of classes\n @return number of classes in the dex file"]
    pub fn get_number_of_classes_for_dex_file(
        context: hApkContext,
        dex_file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @brief retrieve one of the hdvmclass_t from a dex file\n @param dex_file dex file from where to retrieve the class\n @param idx index of the class to retrieve\n @return hdvmclass_t in the given position"]
    pub fn get_hdvmclass_from_dex_by_index(
        context: hApkContext,
        dex_file: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_uint,
    ) -> *mut hdvmclass_t;
}
unsafe extern "C" {
    #[doc = " @brief retrieve the number of strings from a given dex\n @param dex_file file to get the number of strings\n @return number of strings in dex"]
    pub fn get_number_of_strings_from_dex(
        context: hApkContext,
        dex_file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @brief get a string from a dex by an id\n @param dex_file file to get the string\n @param i index of the string to retrieve\n @return string from the dex with id"]
    pub fn get_string_by_id_from_dex(
        context: hApkContext,
        dex_file: *const ::std::os::raw::c_char,
        i: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " @brief Get a method structure given a full dalvik name.\n @param context APK from where to retrieve the method\n @param method_name LclassName;->methodName(parameters)RetType\n @return pointer to a disassembled method"]
    pub fn get_disassembled_method_from_apk(
        context: hApkContext,
        method_name: *const ::std::os::raw::c_char,
    ) -> *mut dvmdisassembled_method_t;
}
unsafe extern "C" {
    #[doc = " @brief Obtain one hdvmclassanalysis_t given its hdvmclass_t\n @param context context from the CORE API\n @param class_ hdvmclass_t to get its analysis\n @return pointer to hdvmclassanalysis_t structure"]
    pub fn get_analyzed_class_by_hdvmclass_from_apk(
        context: hApkContext,
        class_: *mut hdvmclass_t,
    ) -> *mut hdvmclassanalysis_t;
}
unsafe extern "C" {
    #[doc = " @brief Obtain one hdvmclassanalysis_t given its name.\n @param context APK context from the CORE API\n @param class_name name of the class to retrieve\n @return pointer to hdvmclassanalysis_t structure"]
    pub fn get_analyzed_class_from_apk(
        context: hApkContext,
        class_name: *const ::std::os::raw::c_char,
    ) -> *mut hdvmclassanalysis_t;
}
unsafe extern "C" {
    #[doc = " @brief Obtain one hdvmmethodanalysis_t given its hdvmmethod_t\n @param context APK context from the CORE API\n @param method hdvmmethod_t to get its analysis\n @return pointer to hdvmmethodanalysis_t structure"]
    pub fn get_analyzed_method_by_hdvmmethod_from_apk(
        context: hApkContext,
        method: *mut hdvmmethod_t,
    ) -> *mut hdvmmethodanalysis_t;
}
unsafe extern "C" {
    #[doc = " @brief Obtain one hdvmmethodanalysis_t given its name\n @param context APK context from the CORE API\n @param method_full_name dalvik name of the method\n @return pointer to hdvmmethodanalysis_t structure"]
    pub fn get_analyzed_method_from_apk(
        context: hApkContext,
        method_full_name: *const ::std::os::raw::c_char,
    ) -> *mut hdvmmethodanalysis_t;
}
unsafe extern "C" {
    #[doc = " @brief Obtain the number of methodanalysis objects in the APK\n @param context APK context from the CORE API\n @return number of MethodAnalysis in the APK"]
    pub fn get_number_of_methodanalysis_objects(context: hApkContext) -> usize;
}
unsafe extern "C" {
    #[doc = " @brief Obtain a methodanalysis object from the APK by idx\n @param context APK context from the CORE API\n @param idx index of the MethodAnalysis to retrieve\n @return pointer to hdvmmethodanalysis_t"]
    pub fn get_analyzed_method_by_idx(
        context: hApkContext,
        idx: usize,
    ) -> *mut hdvmmethodanalysis_t;
}
unsafe extern "C" {
    #[doc = " @brief Obtain a hdvmstringanalysis_t given a string\n @param context APK context from the CORE API\n @param string string to get its analysis\n @return pointer to hdvmstringanalysis_t structure"]
    pub fn get_analyzed_string_from_apk(
        context: hApkContext,
        string: *const ::std::os::raw::c_char,
    ) -> *mut hdvmstringanalysis_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
